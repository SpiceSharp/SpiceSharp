using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace SpiceSharp.CodeGeneration
{
    /// <summary>
    /// A class that can be used to find out if anything in a document will be autogenerated.
    /// </summary>
    /// <seealso cref="CSharpSyntaxWalker" />
    public class ClassGenerationFinder : CSharpSyntaxWalker
    {
        /// <summary>
        /// Gets the classes that need generation.
        /// </summary>
        /// <value>
        /// The generated classes.
        /// </value>
        public List<Generation> GeneratedClasses { get; } = new List<Generation>();

        /// <summary>
        /// Called when the visitor visits a ClassDeclarationSyntax node.
        /// </summary>
        /// <param name="node"></param>
        public override void VisitClassDeclaration(ClassDeclarationSyntax node)
        {
            GeneratedClasses.AddRange(
                node.AttributeLists
                .SelectMany(list => list.Attributes)
                .Where(attr => string.CompareOrdinal(attr.Name.ToString(), "GeneratedParameters") == 0 || string.CompareOrdinal(attr.Name.ToString(), "GeneratedParametersAttribute") == 0)
                .Select(attr =>
                {
                    var addRules = attr.ArgumentList?.Arguments.FirstOrDefault(arg => string.CompareOrdinal(arg.NameEquals?.Name.ToString(), "AddRules") == 0)?.Expression?.ToString().Equals("true") ?? true;
                    var addNames = attr.ArgumentList?.Arguments.FirstOrDefault(arg => string.CompareOrdinal(arg.NameEquals?.Name.ToString(), "AddNames") == 0)?.Expression?.ToString().Equals("true") ?? false;
                    return new Generation(node, addRules, addNames);
                }));

            // Needed for nested classes
            base.VisitClassDeclaration(node);
        }
    }
}
