<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Algebra.BadlyConditioned" xml:space="preserve">
    <value>The solver was forced to choose a pivot that did not meet tolerance levels at matrix element ({0}, {1}).</value>
  </data>
  <data name="Algebra.InvalidPivot" xml:space="preserve">
    <value>The pivot for elimination step {0} is zero.</value>
  </data>
  <data name="Algebra.SingularMatrix" xml:space="preserve">
    <value>The matrix is singular.</value>
  </data>
  <data name="Algebra.SingularMatrixIndexed" xml:space="preserve">
    <value>The matrix was found to be singular when eliminating row {0}.</value>
  </data>
  <data name="Algebra.SolutionLengthMismatch" xml:space="preserve">
    <value>The solution vector for {0} has {1} elements, but {2} are needed.</value>
  </data>
  <data name="Algebra.SolverNotFactored" xml:space="preserve">
    <value>The solver cannot execute {0} because it has not been factored yet.</value>
  </data>
  <data name="AmbiguousType" xml:space="preserve">
    <value>An ambiguous type reference for type '{0}' has been encountered.</value>
  </data>
  <data name="Behaviors.BehaviorsAlreadyExist" xml:space="preserve">
    <value>There are already behaviors for '{0}'.</value>
  </data>
  <data name="Behaviors.NoBehaviorFor" xml:space="preserve">
    <value>Could not find behaviors for '{0}'.</value>
  </data>
  <data name="BJTs.DepletionCapCoefficientTooLarge" xml:space="preserve">
    <value>{0}: depletion capacitance coefficient too large, limited to {1:g}.</value>
  </data>
  <data name="Components.NodeMismatch" xml:space="preserve">
    <value>Node mismatch: {0} nodes expected, but {1} were given.</value>
  </data>
  <data name="Components.NodeMismatchNamed" xml:space="preserve">
    <value>Node mismatch for '{0}': {1} nodes expected, but {1} were given.</value>
  </data>
  <data name="Components.NoModel" xml:space="preserve">
    <value>No model was specified for component '{0}' of type {1}.</value>
  </data>
  <data name="Delays.NonCausalDelay" xml:space="preserve">
    <value>Non-causal delay detected. Delays should be greater than 0.</value>
  </data>
  <data name="Delays.NonIncreasingTime" xml:space="preserve">
    <value>Time points are not monotonically increasing. Time goes from {0:e3} to {1:e3}.</value>
  </data>
  <data name="Diodes.BreakdownCurrentIncreased" xml:space="preserve">
    <value>{0}: breakdown current increased to {1:g5} to resolve incompatibility with specified saturation current.</value>
  </data>
  <data name="Diodes.ImpossibleFwdRevMatch" xml:space="preserve">
    <value>{0}: unable to match forward and reverse diode region. Bv = {1:g}, ibv = {2:g}.</value>
  </data>
  <data name="EntityCollection.KeyExists" xml:space="preserve">
    <value>An entity with the name "{0}" already exists.</value>
  </data>
  <data name="IndependentSources.NoDc" xml:space="preserve">
    <value>{0} has no DC value, 0 assumed.</value>
  </data>
  <data name="IndependentSources.NoDcUseWaveform" xml:space="preserve">
    <value>{0} has no DC value, waveform value at time 0 used.</value>
  </data>
  <data name="Mosfets.EffectiveChannelTooSmall" xml:space="preserve">
    <value>{0}: effective channel length less than zero.</value>
  </data>
  <data name="Mosfets.NsubTooSmall" xml:space="preserve">
    <value>Nsub &lt; Ni.</value>
  </data>
  <data name="NotEnoughElements" xml:space="preserve">
    <value>No enough elements.</value>
  </data>
  <data name="Parallel.AccessNotSupported" xml:space="preserve">
    <value>Parallel access to {0} is not supported.</value>
  </data>
  <data name="Parameters.ArgumentCountMismatch" xml:space="preserve">
    <value>Expected {2} arguments for {0}, but {1} were passed.</value>
  </data>
  <data name="Parameters.InvalidArguments" xml:space="preserve">
    <value>The arguments for {0} were invalid.</value>
  </data>
  <data name="Parameters.IsZero" xml:space="preserve">
    <value>The parameter cannot be zero.</value>
  </data>
  <data name="Parameters.LowerLimitReached" xml:space="preserve">
    <value>The parameter value of {0} was too small, and was raised from {1} to {2}.</value>
  </data>
  <data name="Parameters.NotFoundNamed" xml:space="preserve">
    <value>Could not find parameter '{0}' of type '{1}' on {2}.</value>
  </data>
  <data name="Parameters.NotFoundTyped" xml:space="preserve">
    <value>Could not find a parameter with type '{0}'.</value>
  </data>
  <data name="Parameters.NotGreater" xml:space="preserve">
    <value>The parameter value should be greater than {0}.</value>
  </data>
  <data name="Parameters.NotGreaterOrEqual" xml:space="preserve">
    <value>The parameter value should be at least {0}.</value>
  </data>
  <data name="Parameters.NotLess" xml:space="preserve">
    <value>The parameter value should be less than {0}.</value>
  </data>
  <data name="Parameters.NotLessOrEqual" xml:space="preserve">
    <value>The parameter value should be at most {0}.</value>
  </data>
  <data name="Parameters.ParameterSetNotFound" xml:space="preserve">
    <value>A parameter set of type '{0}' could not be found.</value>
  </data>
  <data name="Parameters.TooLarge" xml:space="preserve">
    <value>The parameter {0} should be at most {2}, but was {1}.</value>
  </data>
  <data name="Parameters.TooLargeSet" xml:space="preserve">
    <value>The parameter {0} was {1} and was set the maximum {2}.</value>
  </data>
  <data name="Parameters.TooSmall" xml:space="preserve">
    <value>The parameter {0} should be at least {2}, but was {1}.</value>
  </data>
  <data name="Parameters.TooSmallSet" xml:space="preserve">
    <value>The parameter {0} was {1} and was set to the minimum {2}.</value>
  </data>
  <data name="Parameters.UpperLimitReached" xml:space="preserve">
    <value>The parameter value of {0} was too large, and was reduced from {1} to {2}.</value>
  </data>
  <data name="Reflection.NotMatchingType" xml:space="preserve">
    <value>The destination type does not match the source.</value>
  </data>
  <data name="Resistors.ZeroResistance" xml:space="preserve">
    <value>{0}: Model describes short-circuit, 1kOhm used.</value>
  </data>
  <data name="Simulation.Biasing.GminSteppingFailed" xml:space="preserve">
    <value>Gmin step failed.</value>
  </data>
  <data name="Simulation.VariableNotANumber" xml:space="preserve">
    <value>The solution of variable '{0}' is not a number for the current iteration.</value>
  </data>
  <data name="Simulations.Biasing.NoOp" xml:space="preserve">
    <value>Could not determine the operating point.</value>
  </data>
  <data name="Simulations.Biasing.SourceSteppingFailed" xml:space="preserve">
    <value>Source stepping failed.</value>
  </data>
  <data name="Simulations.Biasing.StartDiagonalGminStepping" xml:space="preserve">
    <value>Starting diagonal Gmin stepping.</value>
  </data>
  <data name="Simulations.Biasing.StartGminStepping" xml:space="preserve">
    <value>Starting Gmin stepping.</value>
  </data>
  <data name="Simulations.Biasing.StartSourceStepping" xml:space="preserve">
    <value>Starting source stepping.</value>
  </data>
  <data name="Simulations.ConvergenceAidVariableNotFound" xml:space="preserve">
    <value>Could not set convergence aid: variable '{0}' could not be found.</value>
  </data>
  <data name="Simulations.DC.InvalidEntity" xml:space="preserve">
    <value>Cannot find DC parameter entity '{0}'.</value>
  </data>
  <data name="Simulations.DC.NoSweepPoints" xml:space="preserve">
    <value>The sweep '{0}' does not contain any points to simulate.</value>
  </data>
  <data name="Simulations.History.InvalidLength" xml:space="preserve">
    <value>Histories cannot track less than one point.</value>
  </data>
  <data name="Simulations.InvalidInitializationMode" xml:space="preserve">
    <value>Invalid initialization mode.</value>
  </data>
  <data name="Simulations.IterationsTooSmall" xml:space="preserve">
    <value>The number of iterations cannot be lower than 1.</value>
  </data>
  <data name="Simulations.NoEntities" xml:space="preserve">
    <value>{0}: there are no entities.</value>
  </data>
  <data name="Simulations.StateNotDefined" xml:space="preserve">
    <value>A simulation state of type {0} was not defined.</value>
  </data>
  <data name="Simulations.Time.MaximumExpansionTooSmall" xml:space="preserve">
    <value>The expansion factor should be greater or equal than 1.</value>
  </data>
  <data name="Simulations.Time.Terminated" xml:space="preserve">
    <value>{0}: transient simulation was terminated.</value>
  </data>
  <data name="Simulations.Time.TimestepInvalid" xml:space="preserve">
    <value>The timestep is invalid.</value>
  </data>
  <data name="Simulations.Time.TimestepTooSmall" xml:space="preserve">
    <value>The timestep {0:e5}s is too small at t={1:e5}s.</value>
  </data>
  <data name="Simulations.Time.TimeTooSmall" xml:space="preserve">
    <value>A timepoint cannot be negative.</value>
  </data>
  <data name="Simulations.ValidationFailed" xml:space="preserve">
    <value>The simulation '{0}' has {1} rule violations.</value>
  </data>
  <data name="SizeMismatch1" xml:space="preserve">
    <value>Size mismatch of {0} and {1}.</value>
  </data>
  <data name="SizeMismatch2" xml:space="preserve">
    <value>Size mismatch of {0}: expected {1}.</value>
  </data>
  <data name="Subcircuits.NoEquivalent" xml:space="preserve">
    <value>Cannot compute an equivalent solution for subcircuit '{0}'.</value>
  </data>
  <data name="Sweeps.InvalidInput" xml:space="preserve">
    <value>The sweep input is invalid.</value>
  </data>
  <data name="Sweeps.PointsTooSmall" xml:space="preserve">
    <value>The number of points should be greater than 0.</value>
  </data>
  <data name="TypeAlreadyExists" xml:space="preserve">
    <value>A value of type {0} already exists.</value>
  </data>
  <data name="Units.InvalidExponent" xml:space="preserve">
    <value>Invalid exponent. Cannot represent the exponent {0}/{1}.</value>
  </data>
  <data name="Units.UnitsNotMatched" xml:space="preserve">
    <value>The units are not matched.</value>
  </data>
  <data name="Validation.FloatingNodeFound" xml:space="preserve">
    <value>Floating node detected: {0}.</value>
  </data>
  <data name="Validation.NoGround" xml:space="preserve">
    <value>There is no ground node in the circuit.</value>
  </data>
  <data name="Validation.NoIndependentSource" xml:space="preserve">
    <value>There is no independent source driving the circuit.</value>
  </data>
  <data name="Validation.ShortCircuitComponent" xml:space="preserve">
    <value>{0}: all pins are short-circuited.</value>
  </data>
  <data name="Validation.ShortCircuitFixedVoltage" xml:space="preserve">
    <value>A fixed voltage was applied to a short-circuit by '{0}'.</value>
  </data>
  <data name="ValueNotFound" xml:space="preserve">
    <value>Could not find a value of type {0}.</value>
  </data>
  <data name="VariableDictionary.KeyExists" xml:space="preserve">
    <value>A variable with id '{0}' already exists.</value>
  </data>
  <data name="VariableMap.KeyExists" xml:space="preserve">
    <value>The variable '{0}' is already mapped.</value>
  </data>
  <data name="VariableNotFound" xml:space="preserve">
    <value>A variable by the name of '{0}' could not be found.</value>
  </data>
  <data name="Waveforms.Pulse.FallTimeTooSmall" xml:space="preserve">
    <value>Fall time should be greater or equal than 0.</value>
  </data>
  <data name="Waveforms.Pulse.PeriodTooSmall" xml:space="preserve">
    <value>The period should be greater than 0.</value>
  </data>
  <data name="Waveforms.Pulse.PulseWidthTooSmall" xml:space="preserve">
    <value>Pulse width should be greater or equal than 0.</value>
  </data>
  <data name="Waveforms.Pulse.RiseTimeTooSmall" xml:space="preserve">
    <value>Rise time should be greater or equal than 0.</value>
  </data>
  <data name="Waveforms.Pwl.Empty" xml:space="preserve">
    <value>No points are specified.</value>
  </data>
  <data name="Waveforms.Pwl.NoIncreasingTimeValues" xml:space="preserve">
    <value>The time values are not monotonically increasing.</value>
  </data>
  <data name="Waveforms.Pwl.TimeValueLength" xml:space="preserve">
    <value>The piece-wise linear function requires the same amount of time and value points.</value>
  </data>
  <data name="Waveforms.Sine.FrequencyTooSmall" xml:space="preserve">
    <value>The frequency should be greater than or equal to 0.</value>
  </data>
</root>