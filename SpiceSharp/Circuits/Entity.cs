using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using SpiceSharp.Behaviors;
using SpiceSharp.Simulations;

namespace SpiceSharp.Circuits
{
    /// <summary>
    /// Base class for any circuit object that can take part in simulations.
    /// </summary>
    /// <remarks>
    /// Entities should not contain references to other entities, but only their name identifiers. In the method
    /// <see cref="BindBehaviors"/>  the entity should try to find the necessary behaviors and parameters 
    /// generated by other entities and pass them via a <see cref="BindingContext"/>.
    /// </remarks>
    public abstract class Entity : IEntity
    {
        private static Dictionary<Type, BehaviorFactoryDictionary> BehaviorFactories { get; } =
            new Dictionary<Type, BehaviorFactoryDictionary>();
        private static ReaderWriterLockSlim Lock { get; } = new ReaderWriterLockSlim(LockRecursionPolicy.NoRecursion);

        /// <summary>
        /// Registers a behavior factory for an entity type.
        /// </summary>
        /// <param name="entityType">Type of the entity.</param>
        /// <param name="dictionary">The dictionary.</param>
        protected static void RegisterBehaviorFactory(Type entityType, BehaviorFactoryDictionary dictionary)
        {
            Lock.EnterWriteLock();
            try
            {
                BehaviorFactories.Add(entityType, dictionary);
            }
            finally
            {
                Lock.ExitWriteLock();
            }
        }

        /// <summary>
        /// Finds the behavior factory for a certain behavior type.
        /// </summary>
        /// <param name="entityType">The entity type.</param>
        /// <returns></returns>
        protected static BehaviorFactoryDictionary FindBehaviorFactory(Type entityType)
        {
            // Get the behavior factories for this entity
            Lock.EnterReadLock();
            try
            {
                if (BehaviorFactories.TryGetValue(entityType, out var factories))
                    return factories;
                return null;
            }
            finally
            {
                Lock.ExitReadLock();
            }
        }

        /// <summary>
        /// Gets a collection of parameters.
        /// </summary>
        public ParameterSetDictionary Parameters { get; } = new ParameterSetDictionary();

        /// <summary>
        /// Gets or sets a value indicating whether the parameters should reference that of the entity.
        /// If the parameters are not referenced, then the parameters are cloned instead.
        /// </summary>
        /// <value>
        ///   <c>true</c> if parameters are referenced; otherwise, <c>false</c>.
        /// </value>
        public bool LinkParameters { get; set; } = true;

        /// <summary>
        /// Gets the name of the entity.
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Entity"/> class.
        /// </summary>
        /// <param name="name">The name of the entity.</param>
        protected Entity(string name)
        {
            Name = name;
        }

        /// <summary>
        /// Creates behaviors for the specified simulation that describe this <see cref="Entity"/>.
        /// </summary>
        /// <remarks>
        /// The order typically indicates hierarchy. The entity will create the behaviors in reverse order, allowing
        /// the most specific child class to be used that is necessary. For example, the <see cref="OP"/> simulation needs
        /// <see cref="ITemperatureBehavior"/> and an <see cref="IBiasingBehavior"/>. The entity will first look for behaviors
        /// of type <see cref="IBiasingBehavior"/>, and then for the behaviors of type <see cref="ITemperatureBehavior"/>. However,
        /// if the behavior that was created for <see cref="IBiasingBehavior"/> also implements <see cref="ITemperatureBehavior"/>,
        /// then then entity will not create a new instance of the behavior.
        /// </remarks>
        /// <param name="simulation">The simulation requesting the behaviors.</param>
        /// <param name="entities">The entities being processed, used by the entity to find linked entities.</param>
        public virtual void CreateBehaviors(ISimulation simulation, IEntityCollection entities)
        {
            simulation.ThrowIfNull(nameof(simulation));
            entities.ThrowIfNull(nameof(entities));

            // Skip creating behaviors if the entity is already defined in the pool
            var pool = simulation.EntityBehaviors;
            if (pool.ContainsKey(Name))
                return;

            // Create our entity behavior container
            BehaviorContainer eb = CreateBehaviorContainer();

            // Create behaviors
            var factories = FindBehaviorFactory(GetType());
            if (factories != null)
            {
                // We go through the types in reverse order to account for inheritance
                var types = simulation.BehaviorTypes.ToArray();
                var newBehaviors = new Stack<IBehavior>();
                for (var i = types.Length - 1; i >= 0; i--)
                {
                    // Don't create a behavior for a type that was already implemented by another behavior
                    if (eb.ContainsKey(types[i]))
                        continue;

                    if (factories.TryGetValue(types[i], out var factory))
                    {
                        var behavior = factory(this);
                        eb.Add(behavior);
                        newBehaviors.Push(behavior);
                    }
                }

                if (eb.Count > 0)
                    BindBehaviors(newBehaviors, eb, simulation, entities);
            }

            // Register the behavior
            if (eb.Parameters.Count > 0 || eb.Count > 0)
                simulation.EntityBehaviors.Add(Name, eb);
        }

        /// <summary>
        /// Creates the <see cref="BehaviorContainer"/> for storing the behaviors created by the entity.
        /// </summary>
        /// <returns></returns>
        protected virtual BehaviorContainer CreateBehaviorContainer()
        {
            if (Parameters.Count > 0)
            {
                var eb = new BehaviorContainer(Name, LinkParameters ? Parameters : Parameters.Clone());
                foreach (var p in eb.Parameters.Values)
                    p.CalculateDefaults();
                return eb;
            }

            return new BehaviorContainer(Name);
        }

        /// <summary>
        /// Binds the behaviors to the simulation.
        /// </summary>
        /// <param name="behaviors">The behaviors that needs to be bound to the simulation.</param>
        /// <param name="eb">The entity behaviors and parameters.</param>
        /// <param name="simulation">The simulation to be bound to.</param>
        /// <param name="entities">The entities that the entity may be connected to.</param>
        protected virtual void BindBehaviors(IEnumerable<IBehavior> behaviors, BehaviorContainer eb, ISimulation simulation, IEntityCollection entities)
        {
            simulation.ThrowIfNull(nameof(simulation));
            var context = new BindingContext(simulation, eb);

            // Bind the behaviors
            foreach (var behavior in behaviors)
                behavior.Bind(context);
        }

        /// <summary>
        /// Clone the entity
        /// </summary>
        /// <returns></returns>
        public virtual IEntity Clone()
        {
            var clone = (IEntity) Activator.CreateInstance(GetType(), Name);
            clone.CopyFrom(this);
            return clone;
        }

        /// <summary>
        /// Clone this object.
        /// </summary>
        ICloneable ICloneable.Clone() => Clone();

        /// <summary>
        /// Copy properties from another entity.
        /// </summary>
        /// <param name="source">The source entity.</param>
        public virtual void CopyFrom(IEntity source)
        {
            source.ThrowIfNull(nameof(source));
            Reflection.CopyPropertiesAndFields(source, this);
        }

        /// <summary>
        /// Copy properties from another object.
        /// </summary>
        /// <param name="source">The source object.</param>
        void ICloneable.CopyFrom(ICloneable source) => CopyFrom((IEntity)source);

        #region Implementation of IParameterSet        
        /// <summary>
        /// Sets the value of the principal parameter.
        /// </summary>
        /// <typeparam name="T">The value type.</typeparam>
        /// <param name="value">The value.</param>
        /// <returns>
        ///   <c>true</c> if a principal parameter was set; otherwise <c>false</c>.
        /// </returns>
        public bool TrySetPrincipalParameter<T>(T value) => Parameters.TrySetPrincipalParameter(value);

        /// <summary>
        /// Sets the value of the principal parameters.
        /// </summary>
        /// <typeparam name="T">The value type.</typeparam>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The source object (can be used for chaining).
        /// </returns>
        public Entity SetPrincipalParameter<T>(T value)
        {
            Parameters.SetPrincipalParameter(value);
            return this;
        }
        object IParameterSet.SetPrincipalParameter<T>(T value) => SetPrincipalParameter(value);

        /// <summary>
        /// Tries to get the value of the principal parameter.
        /// </summary>
        /// <typeparam name="T">The value type.</typeparam>
        /// <param name="value">The value.</param>
        /// <returns>
        ///   <c>true</c> if a principal parameter was set; otherwise <c>false</c>.
        /// </returns>
        /// <exception cref="NotImplementedException"></exception>
        public bool TryGetPrincipalParameter<T>(out T value) => Parameters.TryGetPrincipalParameter(out value);

        /// <summary>
        /// Gets the value of the principal parameter.
        /// </summary>
        /// <typeparam name="T">The value type.</typeparam>
        /// <returns>
        /// The value of the principal parameter.
        /// </returns>
        /// <exception cref="NotImplementedException"></exception>
        public T GetPrincipalParameter<T>() => Parameters.GetPrincipalParameter<T>();

        /// <summary>
        /// Creates a setter for the principal parameter.
        /// </summary>
        /// <typeparam name="T">The parameter type.</typeparam>
        /// <returns>
        /// An action that can set the value of the principal parameter, or <c>null</c> if there is no principal parameter.
        /// </returns>
        public Action<T> CreatePrincipalSetter<T>() => Parameters.CreatePrincipalSetter<T>();

        /// <summary>
        /// Creates a getter for the principal parameter.
        /// </summary>
        /// <typeparam name="T">The parameter type.</typeparam>
        /// <returns>
        /// A function returning the value of the principal parameter, or <c>null</c> if there is no principal parameter.
        /// </returns>
        public Func<T> CreatePrincipalGetter<T>() => Parameters.CreatePrincipalGetter<T>();

        /// <summary>
        /// Tries setting a parameter with a specified name.
        /// If multiple parameters have the same name, they will all be set.
        /// </summary>
        /// <typeparam name="T">The value type.</typeparam>
        /// <param name="name">The name of the parameter.</param>
        /// <param name="value">The value.</param>
        /// <param name="comparer">The <see cref="IEqualityComparer{T}" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="EqualityComparer{T}" />.</param>
        /// <returns>
        ///   <c>true</c> if there was one or more parameters set; otherwise <c>false</c>.
        /// </returns>
        public bool TrySetParameter<T>(string name, T value, IEqualityComparer<string> comparer = null) 
            => Parameters.TrySetParameter(name, value, comparer);

        /// <summary>
        /// Sets a parameter with a specified name. If multiple parameters have the same name, they will all be set.
        /// </summary>
        /// <typeparam name="T">The value type.</typeparam>
        /// <param name="name">The name of the parameter.</param>
        /// <param name="value">The value.</param>
        /// <param name="comparer">The <see cref="IEqualityComparer{T}" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="EqualityComparer{T}" />.</param>
        /// <returns>
        /// The source object (can be used for chaining).
        /// </returns>
        public Entity SetParameter<T>(string name, T value, IEqualityComparer<string> comparer = null)
        {
            Parameters.SetParameter(name, value, comparer);
            return this;
        }
        object IParameterSet.SetParameter<T>(string name, T value, IEqualityComparer<string> comparer)
            => SetParameter(name, value, comparer);

        /// <summary>
        /// Tries getting a parameter value. Only the first found parameter with the specified name is returned.
        /// </summary>
        /// <typeparam name="T">The value type.</typeparam>
        /// <param name="name">The name of the parameter.</param>
        /// <param name="value">The value.</param>
        /// <param name="comparer">The <see cref="IEqualityComparer{T}" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="EqualityComparer{T}" />.</param>
        /// <returns>
        ///   <c>true</c> if the parameter exists and the value was read; otherwise <c>false</c>.
        /// </returns>
        public bool TryGetParameter<T>(string name, out T value, IEqualityComparer<string> comparer = null)
            => Parameters.TryGetParameter(name, out value, comparer);

        /// <summary>
        /// Gets a parameter value. Only the first found parameter with the specified name is returned.
        /// </summary>
        /// <typeparam name="T">The value type.</typeparam>
        /// <param name="name">The name of the parameter.</param>
        /// <param name="comparer">The <see cref="IEqualityComparer{T}" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="EqualityComparer{T}" />.</param>
        /// <returns>
        /// The parameter value.
        /// </returns>
        public T GetParameter<T>(string name, IEqualityComparer<string> comparer = null)
            => Parameters.GetParameter<T>(name, comparer);

        /// <summary>
        /// Returns a setter for the first eligible parameter with the specified name.
        /// </summary>
        /// <typeparam name="T">The parameter type.</typeparam>
        /// <param name="name">The name of the parameter.</param>
        /// <param name="comparer">The <see cref="IEqualityComparer{T}" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="EqualityComparer{T}" />.</param>
        /// <returns>
        /// A function returning the value of the parameter, or <c>null</c> if there is no parameter with the specified name.
        /// </returns>
        public Action<T> CreateSetter<T>(string name, IEqualityComparer<string> comparer = null)
            => Parameters.CreateSetter<T>(name, comparer);

        /// <summary>
        /// Returns a getter for the first found parameter with the specified name.
        /// </summary>
        /// <typeparam name="T">The parameter type.</typeparam>
        /// <param name="name">The name of the parameter.</param>
        /// <param name="comparer">The string comparer used for identifying the parameter name.</param>
        /// <returns>
        /// A function returning the value of the parameter, or <c>null</c> if there is no parameter with the specified name.
        /// </returns>
        public Func<T> CreateGetter<T>(string name, IEqualityComparer<string> comparer = null)
            => Parameters.CreateGetter<T>(name, comparer);

        /// <summary>
        /// Tries to call a method by name without arguments.
        /// If multiple parameters by this name exist, all of them will be called.
        /// </summary>
        /// <param name="name">The name of the method.</param>
        /// <param name="comparer">The <see cref="IEqualityComparer{T}" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="EqualityComparer{T}" />.</param>
        /// <returns>
        ///   <c>true</c> if there was one or more methods called; otherwise <c>false</c>.
        /// </returns>
        public bool TrySetParameter(string name, IEqualityComparer<string> comparer = null)
            => Parameters.TrySetParameter(name, comparer);

        /// <summary>
        /// Calls a method by name without arguments.
        /// If multiple parameters by this name exist, all of them will be called.
        /// </summary>
        /// <param name="name">The name of the method.</param>
        /// <param name="comparer">The <see cref="IEqualityComparer{T}" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="EqualityComparer{T}" />.</param>
        /// <returns>
        /// The source object (can be used for chaining).
        /// </returns>
        public Entity SetParameter(string name, IEqualityComparer<string> comparer = null)
        {
            Parameters.SetParameter(name, comparer);
            return this;
        }
        object IParameterSet.SetParameter(string name, IEqualityComparer<string> comparer)
            => SetParameter(name, comparer);
        #endregion
    }
}
