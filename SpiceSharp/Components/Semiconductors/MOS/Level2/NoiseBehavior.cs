using System;
using SpiceSharp.Behaviors;
using SpiceSharp.Components.NoiseSources;
using SpiceSharp.Simulations;

namespace SpiceSharp.Components.MosfetBehaviors.Level2
{
    /// <summary>
    /// Noise behavior for a <see cref="Mosfet1"/>
    /// </summary>
    public class NoiseBehavior : FrequencyBehavior, INoiseBehavior
    {
        private readonly INoiseSimulationState _noise;
        private readonly ModelNoiseParameters _mnp;

        /// <summary>
        /// Index of the thermal noise generated by the drain resistance.
        /// </summary>
        protected const int RdNoise = 0;

        /// <summary>
        /// Index of the thermal noise generated by the source resistance.
        /// </summary>
        protected const int RsNoise = 1;

        /// <summary>
        /// Index of the shot-noise generated by the drain current.
        /// </summary>
        protected const int IdNoise = 2;

        /// <summary>
        /// Index of the flicker-noise.
        /// </summary>
        protected const int FlickerNoise = 3;

        /// <summary>
        /// Noise generators
        /// </summary>
        public ComponentNoise MosfetNoise { get; } = new ComponentNoise(
            new NoiseThermal("rd", 0, 4),
            new NoiseThermal("rs", 2, 5),
            new NoiseThermal("id", 4, 5),
            new NoiseGain("1overf", 4, 5)
        );

        /// <summary>
        /// Initializes a new instance of the <see cref="NoiseBehavior"/> class.
        /// </summary>
        /// <param name="name">Name</param>
        /// <param name="context"></param>
        public NoiseBehavior(string name, ComponentBindingContext context) : base(name, context)
        {
            _mnp = context.ModelBehaviors.GetParameterSet<ModelNoiseParameters>();
            _noise = context.GetState<INoiseSimulationState>();
            MosfetNoise.Bind(context, context.Nodes[0], context.Nodes[1], context.Nodes[2], context.Nodes[3], DrainPrime, SourcePrime);
        }

        /// <summary>
        /// Calculate the noise contributions.
        /// </summary>
        void INoiseBehavior.Noise()
        {
            double coxSquared;
            if (ModelParameters.OxideCapFactor > 0.0)
                coxSquared = ModelParameters.OxideCapFactor;
            else
                coxSquared = 3.9 * 8.854214871e-12 / 1e-7;
            coxSquared *= coxSquared;

            // Set noise parameters
            MosfetNoise.Generators[RdNoise].SetCoefficients(DrainConductance);
            MosfetNoise.Generators[RsNoise].SetCoefficients(SourceConductance);
            MosfetNoise.Generators[IdNoise].SetCoefficients(2.0 / 3.0 * Math.Abs(Transconductance));
            MosfetNoise.Generators[FlickerNoise].SetCoefficients(
                _mnp.FlickerNoiseCoefficient *
                Math.Exp(_mnp.FlickerNoiseExponent * Math.Log(Math.Max(Math.Abs(DrainCurrent), 1e-38))) /
                (Parameters.Width * (Parameters.Length - 2 * ModelParameters.LateralDiffusion) *
                 coxSquared) / _noise.Frequency);

            // Evaluate noise sources
            MosfetNoise.Evaluate();
        }
    }
}
