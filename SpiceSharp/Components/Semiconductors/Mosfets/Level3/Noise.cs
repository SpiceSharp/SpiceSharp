using System;
using SpiceSharp.Behaviors;
using SpiceSharp.Components.NoiseSources;
using SpiceSharp.Simulations;

namespace SpiceSharp.Components.Mosfets.Level3
{
    /// <summary>
    /// Noise behavior for a <see cref="Mosfet3"/>.
    /// </summary>
    /// <seealso cref="Frequency"/>
    /// <seealso cref="INoiseBehavior"/>
    public class Noise : Frequency,
        INoiseBehavior
    {
        private readonly INoiseSimulationState _noise;

        /// <summary>
        /// Index of the thermal noise generated by the drain resistance.
        /// </summary>
        protected const int RdNoise = 0;

        /// <summary>
        /// Index of the thermal noise generated by the source resistance.
        /// </summary>
        protected const int RsNoise = 1;

        /// <summary>
        /// Index of the shot-noise generated by the drain current.
        /// </summary>
        protected const int IdNoise = 2;

        /// <summary>
        /// Index of the flicker-noise.
        /// </summary>
        protected const int FlickerNoise = 3;

        /// <summary>
        /// Gets the mosfet noise generators.
        /// </summary>
        /// <value>
        /// The mosfet noise generators.
        /// </value>
        public ComponentNoise MosfetNoise { get; } = new ComponentNoise(
            new NoiseThermal("rd", 0, 4),
            new NoiseThermal("rs", 2, 5),
            new NoiseThermal("id", 4, 5),
            new NoiseGain("1overf", 4, 5)
        );

        /// <summary>
        /// Initializes a new instance of the <see cref="Noise"/> class.
        /// </summary>
        /// <param name="name">Name.</param>
        /// <param name="context">The binding context.</param>
        public Noise(string name, ComponentBindingContext context) : base(name, context)
        {
            _noise = context.GetState<INoiseSimulationState>();
            var complex = context.GetState<IComplexSimulationState>();
            MosfetNoise.Bind(context,
                complex.GetSharedVariable(context.Nodes[0]), complex.GetSharedVariable(context.Nodes[1]), complex.GetSharedVariable(context.Nodes[2]), complex.GetSharedVariable(context.Nodes[3]),
                DrainPrime, SourcePrime);
        }

        void INoiseBehavior.Noise()
        {
            double coxSquared;
            if (ModelParameters.OxideCapFactor > 0.0)
                coxSquared = ModelParameters.OxideCapFactor;
            else
                coxSquared = 3.9 * 8.854214871e-12 / 1e-7;
            coxSquared *= coxSquared;

            // Set noise parameters
            MosfetNoise.Generators[RdNoise].SetCoefficients(DrainConductance);
            MosfetNoise.Generators[RsNoise].SetCoefficients(SourceConductance);
            MosfetNoise.Generators[IdNoise].SetCoefficients(2.0 / 3.0 * Math.Abs(Transconductance));
            MosfetNoise.Generators[FlickerNoise].SetCoefficients(
                ModelParameters.FlickerNoiseCoefficient *
                Math.Exp(ModelParameters.FlickerNoiseExponent * Math.Log(Math.Max(Math.Abs(DrainCurrent), 1e-38))) /
                (Parameters.Width * (Parameters.Length - 2 * ModelParameters.LateralDiffusion) *
                 coxSquared) / _noise.Frequency);

            // Evaluate noise sources
            MosfetNoise.Evaluate();
        }
    }
}
