// This file was automatically generated by SpiceSharp.CodeGeneration
using SpiceSharp.Diagnostics;
using SpiceSharp.ParameterSets;
using System;
using System.Collections.Generic;

namespace SpiceSharp.Components.CommonBehaviors
{
    public partial class IndependentSourceParameters : IImportParameterSet<double>, IExportPropertySet<double>, IImportParameterSet<IWaveformDescription>, IExportPropertySet<IWaveformDescription>
    {
        private enum NamedParameters
        {
            DcValue,
            Waveform,
            AcMagnitude,
            AcPhase
        }
        private static readonly Dictionary<string, NamedParameters> _namedMap = new Dictionary<string, NamedParameters>(ReflectionHelper.Comparer) { { "dc", NamedParameters.DcValue }, { "waveform", NamedParameters.Waveform }, { "acmag", NamedParameters.AcMagnitude }, { "acphase", NamedParameters.AcPhase } };

        /// <inheritdoc/>
        void IImportParameterSet<double>.SetParameter(string name, double value)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.DcValue:
                        DcValue = value;
                        return;
                    case NamedParameters.AcMagnitude:
                        AcMagnitude = value;
                        return;
                    case NamedParameters.AcPhase:
                        AcPhase = value;
                        return;
                }
            }
            throw new ParameterNotFoundException(this, name, typeof(double));
        }

        /// <inheritdoc/>
        bool IImportParameterSet<double>.TrySetParameter(string name, double value)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.DcValue:
                        DcValue = value;
                        return true;
                    case NamedParameters.AcMagnitude:
                        AcMagnitude = value;
                        return true;
                    case NamedParameters.AcPhase:
                        AcPhase = value;
                        return true;
                }
            }
            return false;
        }

        /// <inheritdoc/>
        Action<double> IImportParameterSet<double>.CreateParameterSetter(string name)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.DcValue:
                        return value => DcValue = value;
                    case NamedParameters.AcMagnitude:
                        return value => AcMagnitude = value;
                    case NamedParameters.AcPhase:
                        return value => AcPhase = value;
                }
            }
            return null;
        }

        /// <inheritdoc/>
        double IExportPropertySet<double>.GetProperty(string name)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.DcValue:
                        return DcValue;
                    case NamedParameters.AcMagnitude:
                        return AcMagnitude;
                    case NamedParameters.AcPhase:
                        return AcPhase;
                }
            }
            throw new ParameterNotFoundException(this, name, typeof(double));
        }

        /// <inheritdoc/>
        double IExportPropertySet<double>.TryGetProperty(string name, out bool isValid)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.DcValue:
                        isValid = true;
                        return DcValue;
                    case NamedParameters.AcMagnitude:
                        isValid = true;
                        return AcMagnitude;
                    case NamedParameters.AcPhase:
                        isValid = true;
                        return AcPhase;
                }
            }
            isValid = false;
            return default;
        }

        /// <inheritdoc/>
        Func<double> IExportPropertySet<double>.CreatePropertyGetter(string name)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.DcValue:
                        return () => DcValue;
                    case NamedParameters.AcMagnitude:
                        return () => AcMagnitude;
                    case NamedParameters.AcPhase:
                        return () => AcPhase;
                }
            }
            return null;
        }

        /// <inheritdoc/>
        void IImportParameterSet<IWaveformDescription>.SetParameter(string name, IWaveformDescription value)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Waveform:
                        Waveform = value;
                        return;
                }
            }
            throw new ParameterNotFoundException(this, name, typeof(IWaveformDescription));
        }

        /// <inheritdoc/>
        bool IImportParameterSet<IWaveformDescription>.TrySetParameter(string name, IWaveformDescription value)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Waveform:
                        Waveform = value;
                        return true;
                }
            }
            return false;
        }

        /// <inheritdoc/>
        Action<IWaveformDescription> IImportParameterSet<IWaveformDescription>.CreateParameterSetter(string name)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Waveform:
                        return value => Waveform = value;
                }
            }
            return null;
        }

        /// <inheritdoc/>
        IWaveformDescription IExportPropertySet<IWaveformDescription>.GetProperty(string name)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Waveform:
                        return Waveform;
                }
            }
            throw new ParameterNotFoundException(this, name, typeof(IWaveformDescription));
        }

        /// <inheritdoc/>
        IWaveformDescription IExportPropertySet<IWaveformDescription>.TryGetProperty(string name, out bool isValid)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Waveform:
                        isValid = true;
                        return Waveform;
                }
            }
            isValid = false;
            return default;
        }

        /// <inheritdoc/>
        Func<IWaveformDescription> IExportPropertySet<IWaveformDescription>.CreatePropertyGetter(string name)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Waveform:
                        return () => Waveform;
                }
            }
            return null;
        }
    }
}