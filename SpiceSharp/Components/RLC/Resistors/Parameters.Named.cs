// This file was automatically generated by SpiceSharp.CodeGeneration
using SpiceSharp.Diagnostics;
using SpiceSharp.ParameterSets;
using System;
using System.Collections.Generic;

namespace SpiceSharp.Components.Resistors
{
    public partial class Parameters : IImportParameterSet<double>, IExportPropertySet<double>
    {
        private enum NamedParameters
        {
            Resistance,
            TemperatureCelsius,
            Width,
            Length,
            ParallelMultiplier,
            SeriesMultiplier
        }
        private static readonly Dictionary<string, NamedParameters> _namedMap = new Dictionary<string, NamedParameters>(ReflectionHelper.Comparer) { { "resistance", NamedParameters.Resistance }, { "r", NamedParameters.Resistance }, { "temp", NamedParameters.TemperatureCelsius }, { "w", NamedParameters.Width }, { "l", NamedParameters.Length }, { "m", NamedParameters.ParallelMultiplier }, { "n", NamedParameters.SeriesMultiplier } };

        /// <inheritdoc/>
        void IImportParameterSet<double>.SetParameter(string name, double value)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Resistance:
                        Resistance = value;
                        return;
                    case NamedParameters.TemperatureCelsius:
                        TemperatureCelsius = value;
                        return;
                    case NamedParameters.Width:
                        Width = value;
                        return;
                    case NamedParameters.Length:
                        Length = value;
                        return;
                    case NamedParameters.ParallelMultiplier:
                        ParallelMultiplier = value;
                        return;
                    case NamedParameters.SeriesMultiplier:
                        SeriesMultiplier = value;
                        return;
                }
            }
            throw new ParameterNotFoundException(this, name, typeof(double));
        }

        /// <inheritdoc/>
        bool IImportParameterSet<double>.TrySetParameter(string name, double value)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Resistance:
                        Resistance = value;
                        return true;
                    case NamedParameters.TemperatureCelsius:
                        TemperatureCelsius = value;
                        return true;
                    case NamedParameters.Width:
                        Width = value;
                        return true;
                    case NamedParameters.Length:
                        Length = value;
                        return true;
                    case NamedParameters.ParallelMultiplier:
                        ParallelMultiplier = value;
                        return true;
                    case NamedParameters.SeriesMultiplier:
                        SeriesMultiplier = value;
                        return true;
                }
            }
            return false;
        }

        /// <inheritdoc/>
        Action<double> IImportParameterSet<double>.CreateParameterSetter(string name)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Resistance:
                        return value => Resistance = value;
                    case NamedParameters.TemperatureCelsius:
                        return value => TemperatureCelsius = value;
                    case NamedParameters.Width:
                        return value => Width = value;
                    case NamedParameters.Length:
                        return value => Length = value;
                    case NamedParameters.ParallelMultiplier:
                        return value => ParallelMultiplier = value;
                    case NamedParameters.SeriesMultiplier:
                        return value => SeriesMultiplier = value;
                }
            }
            return null;
        }

        /// <inheritdoc/>
        double IExportPropertySet<double>.GetProperty(string name)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Resistance:
                        return Resistance;
                    case NamedParameters.TemperatureCelsius:
                        return TemperatureCelsius;
                    case NamedParameters.Width:
                        return Width;
                    case NamedParameters.Length:
                        return Length;
                    case NamedParameters.ParallelMultiplier:
                        return ParallelMultiplier;
                    case NamedParameters.SeriesMultiplier:
                        return SeriesMultiplier;
                }
            }
            throw new ParameterNotFoundException(this, name, typeof(double));
        }

        /// <inheritdoc/>
        double IExportPropertySet<double>.TryGetProperty(string name, out bool isValid)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Resistance:
                        isValid = true;
                        return Resistance;
                    case NamedParameters.TemperatureCelsius:
                        isValid = true;
                        return TemperatureCelsius;
                    case NamedParameters.Width:
                        isValid = true;
                        return Width;
                    case NamedParameters.Length:
                        isValid = true;
                        return Length;
                    case NamedParameters.ParallelMultiplier:
                        isValid = true;
                        return ParallelMultiplier;
                    case NamedParameters.SeriesMultiplier:
                        isValid = true;
                        return SeriesMultiplier;
                }
            }
            isValid = false;
            return default;
        }

        /// <inheritdoc/>
        Func<double> IExportPropertySet<double>.CreatePropertyGetter(string name)
        {
            if (_namedMap.TryGetValue(name, out var id))
            {
                switch (id)
                {
                    case NamedParameters.Resistance:
                        return () => Resistance;
                    case NamedParameters.TemperatureCelsius:
                        return () => TemperatureCelsius;
                    case NamedParameters.Width:
                        return () => Width;
                    case NamedParameters.Length:
                        return () => Length;
                    case NamedParameters.ParallelMultiplier:
                        return () => ParallelMultiplier;
                    case NamedParameters.SeriesMultiplier:
                        return () => SeriesMultiplier;
                }
            }
            return null;
        }
    }
}