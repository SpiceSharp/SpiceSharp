using SpiceSharp.Attributes;
using SpiceSharp.Components.Inductors;
using SpiceSharp.ParameterSets;
using SpiceSharp.Validation;
using System;
using System.Linq;

namespace SpiceSharp.Components
{
    /// <summary>
    /// An inductor.
    /// </summary>
    /// <seealso cref="Component"/>
    /// <seealso cref="IParameterized{P}"/>
    /// <seealso cref="Inductors.Parameters"/>
    /// <seealso cref="IRuleSubject"/>
    [Pin(0, "L+"), Pin(1, "L-"), VoltageDriver(0, 1), AutoGeneratedBehaviors]
    public partial class Inductor : Component<Parameters>,
        IRuleSubject
    {
        /// <summary>
        /// Constants
        /// </summary>
        [ParameterName("pincount"), ParameterInfo("Number of pins")]
        public const int InductorPinCount = 2;

        /// <summary>
        /// Initializes a new instance of the <see cref="Inductor"/> class.
        /// </summary>
        /// <param name="name">The name of the inductor.</param>
        /// <exception cref="ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c>.</exception>
        public Inductor(string name)
            : base(name, InductorPinCount)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Inductor"/> class.
        /// </summary>
        /// <param name="name">The name of the inductor.</param>
        /// <param name="pos">The positive node.</param>
        /// <param name="neg">The negative node.</param>
        /// <param name="inductance">The inductance.</param>
        /// <exception cref="ArgumentNullException">Thrown if <paramref name="name"/> or any node is <c>null</c>.</exception>
        public Inductor(string name, string pos, string neg, double inductance)
            : this(name)
        {
            Parameters.Inductance = inductance;
            Connect(pos, neg);
        }

        /// <inheritdoc/>
        void IRuleSubject.Apply(IRules rules)
        {
            var p = rules.GetParameterSet<ComponentRuleParameters>();
            var nodes = Nodes.Select(name => p.Factory.GetSharedVariable(name)).ToArray();
            foreach (var rule in rules.GetRules<IConductiveRule>())
                rule.AddPath(this, nodes[0], nodes[1]);
            foreach (var rule in rules.GetRules<IAppliedVoltageRule>())
                rule.Fix(this, nodes[0], nodes[1]);
        }
    }
}
