<#@ output extension = ".cs" #>
<#@ include file = "..\..\ParameterGenerator.t4" #>
<#

    var parameters = new[] {
            new Parameter(new[] { "resistance", "r" }, "Resistance", "Resistance")
            .Type("GivenParameter<double>").Principal().Units("\\u03a9").GreaterThanOrEqual("MinimumResistance"),
            
            new Parameter("temp", "TemperatureCelsius", "Instance operating temperature")
            .Uninteresting().Units("\\u00b0C").Derived("Temperature - Constants.CelsiusKelvin", "Temperature = value + Constants.CelsiusKelvin"),
            
            new Parameter("w", "Width", "Width")
            .Type("GivenParameter<double>").Units("m").GreaterThan("0.0"),
            
            new Parameter("l", "Length", "Length")
            .Type("GivenParameter<double>").Units("m").GreaterThan("0.0"),

            new Parameter("m", "ParallelMultiplier", "Parallel multiplier")
                .GreaterThanOrEqual("0.0", true).Default("1.0"),
            
            new Parameter("n", "SeriesMultiplier", "Series multiplier")
                .GreaterThan("0.0", true).Default("1.0")
            };
#>using SpiceSharp.Attributes;
using System;

namespace SpiceSharp.Components.ResistorBehaviors
{
    /// <summary>
    /// Parameters for a <see cref="Resistor" />.
    /// </summary>
    public class Parameters : ParameterSet
    {
        /// <summary>
        /// The minimum resistance for any resistor.
        /// </summary>
        public const double MinimumResistance = 1e-3;

        /// <summary>
        /// Gets the temperature parameter in degrees Kelvin.
        /// </summary>
        public GivenParameter<double> Temperature { get; set; } = new GivenParameter<double>(Constants.ReferenceTemperature);

        <# WriteParameters(parameters); #>
    }
}