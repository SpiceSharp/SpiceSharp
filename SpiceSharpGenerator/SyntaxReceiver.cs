using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;
using System.Linq;
using System.Collections.Concurrent;

namespace SpiceSharpGenerator
{
    /// <summary>
    /// A receiver for entities.
    /// </summary>
    public class SyntaxReceiver : ISyntaxReceiver
    {
        /// <summary>
        /// Gets the list of eligible entities that may need to be extended using code generation.
        /// </summary>
        /// <value>
        /// The entity classes.
        /// </value>
        public ConcurrentBag<ClassDeclarationSyntax> Entities { get; } = new ConcurrentBag<ClassDeclarationSyntax>();

        /// <summary>
        /// Gets a list of behaviors that were tagged with the BehaviorFor attribute.
        /// </summary>
        /// <value>
        /// The behavior classes.
        /// </value>
        public ConcurrentBag<ClassDeclarationSyntax> Behaviors { get; } = new ConcurrentBag<ClassDeclarationSyntax>();

        /// <summary>
        /// Gets a list of binding contexts.
        /// </summary>
        /// <value>
        /// The binding context classes.
        /// </value>
        public ConcurrentBag<ClassDeclarationSyntax> BindingContexts { get; } = new ConcurrentBag<ClassDeclarationSyntax>();

        /// <summary>
        /// Collect whatever we need to create generated code later.
        /// </summary>
        /// <param name="syntaxNode">The syntax node.</param>
        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            // Find out if this node is eligible for creating CreateBehaviors()
            if (syntaxNode is ClassDeclarationSyntax @class)
            {
                foreach (var attribute in @class.AttributeLists.SelectMany(list => list.Attributes))
                {
                    var name = attribute.Name.GetText().ToString();
                    if (string.CompareOrdinal(name, "AutoGeneratedBehaviorsAttribute") == 0 ||
                        string.CompareOrdinal(name, "AutoGeneratedBehaviors") == 0)
                    {
                        Entities.Add(@class);
                        return;
                    }
                    if (string.CompareOrdinal(name, "BehaviorForAttribute") == 0 ||
                        string.CompareOrdinal(name, "BehaviorFor") == 0)
                    {
                        Behaviors.Add(@class);
                        return;
                    }
                    if (string.CompareOrdinal(name, "BindingContextForAttribute") == 0 ||
                        string.CompareOrdinal(name, "BindingContextFor") == 0)
                    {
                        BindingContexts.Add(@class);
                        return;
                    }
                }
            }
        }
    }
}
